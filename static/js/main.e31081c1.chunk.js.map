{"version":3,"sources":["components/landing-page/LandingPage.tsx","components/context.ts","components/main/games/NewGame.tsx","components/main/games/Game.tsx","components/main/games/PastGames.tsx","components/main/games/GameArea.tsx","components/main/players/Player.tsx","components/main/players/NewPlayer.tsx","components/main/players/PlayerArea.tsx","components/main/Room.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["LandingPage","props","_this","Object","classCallCheck","this","console","log","possibleConstructorReturn","getPrototypeOf","call","state","roomName","goToRoom","_this2","react_default","a","createElement","Redirect","to","concat","Container","style","display","justifyContent","marginTop","Card","width","Body","Form","Row","Col","Group","controlId","Control","type","placeholder","onInput","e","setState","objectSpread","currentTarget","value","Text","className","Button","variant","color","onClick","React","Component","RoomContext","createContext","NewGame","typeahead","_handleSearch","typeAhead","isLoading","options","fetch","apiUrl","context","id","then","res","status","json","catch","newGamePlayers","gameId","addedPlayers","map","addPlayerDisabled","includes","length","players","removePlayerDisabled","playerInputs","player","idx","key","marginBottom","xs","lg","as","onChange","toConsumableArray","firstWithId","findIndex","cur","firstEmpty","parseInt","disabled","hidden","rPlayer","name","xl","undefined","points","blur","splice","addGameDisabled","filter","md","Title","lib","labelKey","onSearch","ref","float","newGame","boardGame","gamePlayers","val","getInstance","clear","method","body","JSON","stringify","game","addGame","contextType","Game","place","placings","playerItems","background","ListGroup","Item","action","bsPrefix","Subtitle","gameTime","marginRight","PastGames","page","games","games_Game","GameArea","games_NewGame","games_PastGames","Player","NewPlayer","Label","autoComplete","newPlayer","addPlayer","PlayerArea","players_Player","players_NewPlayer","Room","createTime","loading","match","params","room","unshift","push","Provider","Tabs","defaultActiveKey","Tab","eventKey","title","games_GameArea","players_PlayerArea","App","BrowserRouter","basename","process","Route","path","exact","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","components_App","document","getElementById","URL","href","origin","addEventListener","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e31081c1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Container, Row, Col, Card, Form, Button} from \"react-bootstrap\";\r\nimport {Redirect, RouteComponentProps} from \"react-router-dom\";\r\n\r\nexport interface LandingPageState {\r\n    roomName: string,\r\n    goToRoom: boolean\r\n}\r\n\r\n\r\nclass LandingPage extends React.Component<RouteComponentProps, LandingPageState> {\r\n    constructor(props: RouteComponentProps) {\r\n        console.log(props);\r\n        super(props);\r\n        this.state = {\r\n            roomName: \"\",\r\n            goToRoom: false\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        if (this.state.goToRoom){\r\n            console.log(this.state);\r\n            return <Redirect to={`/${this.state.roomName}`} />;\r\n        }\r\n        return (\r\n            <Container>\r\n                <div style={{display: 'flex', justifyContent: 'center', marginTop: \"20%\"}}>\r\n                    <Card style={{width: \"50%\"}}>\r\n                        <Card.Body>\r\n                            <Form>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group controlId=\"formBasicEmail\">\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                placeholder=\"Room name\"\r\n                                                onInput={(e: any) => {\r\n                                                    this.setState({...this.state, roomName: e.currentTarget.value})\r\n                                                }}\r\n                                            />\r\n                                            <Form.Text className=\"text-muted\">\r\n                                                A new room will be created if one doesn't exist.\r\n                                            </Form.Text>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Button\r\n                                            variant=\"outline-primary\"\r\n                                            style={{color: \"white\"}}\r\n                                            onClick={() => {\r\n                                                this.setState({...this.state, goToRoom: true});\r\n                                            }}\r\n                                        >\r\n                                            Go to room\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LandingPage;","import React from \"react\";\r\n\r\nexport const RoomContext = React.createContext({});\r\n","import React from \"react\";\r\nimport {Button, Card, Col, Form, Row} from \"react-bootstrap\";\r\nimport {RoomContext} from '../../context'\r\nimport {AsyncTypeahead} from 'react-bootstrap-typeahead';\r\nimport {apiUrl} from '../../../config.json'\r\ninterface NewGameProps {\r\n\r\n}\r\n\r\ninterface NewGameState {\r\n    gameId: number | null,\r\n    newGamePlayers: ({\r\n        id: number\r\n        name: string\r\n        points: number | null\r\n    } | {})[],\r\n    typeAhead: {\r\n        isLoading: boolean,\r\n        options: {\r\n            id: number;\r\n            name: string;\r\n        }[]\r\n    }\r\n}\r\n\r\nclass NewGame extends React.Component<NewGameProps, NewGameState> {\r\n    typeahead: any;\r\n    constructor(props: NewGameProps) {\r\n        super(props);\r\n        this.state = {\r\n            newGamePlayers: [{id: -1}],\r\n            gameId: null,\r\n            typeAhead: {\r\n                isLoading: false,\r\n                options: []\r\n            }\r\n        };\r\n    }\r\n\r\n    _handleSearch = (e: any) => {\r\n        if (e === \"\") {\r\n            return\r\n        }\r\n        this.setState({...this.state, typeAhead: {isLoading: true, options: this.state.typeAhead.options}});\r\n        fetch(`${apiUrl}/boardGames?search=${e}&room=${this.context.id}`).then(res => {\r\n            if (res.status === 200) {\r\n                return res.json()\r\n            } else {\r\n                return [];\r\n            }\r\n        }).then(options => {\r\n            this.setState({...this.state, typeAhead: {isLoading: false, options}});\r\n        }).catch(e => {\r\n            console.log(e)\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const addedPlayers = this.state.newGamePlayers.map((e: any) => e.id);\r\n        const addPlayerDisabled = addedPlayers.includes(-1) || addedPlayers.length >= this.context.players.length;\r\n        const removePlayerDisabled = addedPlayers.length <= 1;\r\n\r\n        const playerInputs = this.state.newGamePlayers.map((player: any, idx) => {\r\n            return (\r\n                <Row\r\n                    key={`ta_${idx}`}\r\n                    style={{marginBottom: 5}}\r\n                >\r\n                    <Col xs={6} lg={6}>\r\n                        <Form.Control\r\n                            value={player.id}\r\n                            as=\"select\"\r\n                            onChange={(e: any) => {\r\n                                const newGamePlayers = [...this.state.newGamePlayers];\r\n                                const firstWithId = newGamePlayers.findIndex((cur: any) => {\r\n                                    return cur && cur.id === player.id\r\n                                });\r\n\r\n                                const firstEmpty = newGamePlayers.findIndex((e: any) => {\r\n                                    return e && e.id === -1\r\n                                });\r\n                                if (firstEmpty !== -1) {\r\n                                    newGamePlayers[firstEmpty] = {id: parseInt(e.currentTarget.value)};\r\n                                }else if(firstWithId !== -1) {\r\n                                    newGamePlayers[firstWithId] = {id: parseInt(e.currentTarget.value)};\r\n                                }\r\n                                this.setState({...this.state, newGamePlayers})\r\n                            }}\r\n                        >\r\n                            <option value={-1} disabled={true} hidden={true}/>\r\n                            {this.context.players.map((rPlayer: any) => {\r\n                                return <option\r\n                                    key={`option_${idx}_${rPlayer.id}`}\r\n                                    value={rPlayer.id}\r\n                                    disabled={addedPlayers.includes(rPlayer.id)}\r\n                                >\r\n                                    {rPlayer.name}\r\n                                </option>\r\n                            })}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col xs={3} xl={4}>\r\n                        <Form.Group controlId=\"formPointInput\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                disabled={player.id === -1}\r\n                                value={player.points !== undefined ? player.points : \"\"}\r\n                                onChange={(e: any) => {\r\n                                    const points = e.currentTarget.value;\r\n                                    const newGamePlayers = [...this.state.newGamePlayers];\r\n                                    const firstWithId = newGamePlayers.findIndex((cur: any) => {\r\n                                        return cur && cur.id === player.id\r\n                                    });\r\n                                    if (firstWithId !== -1) {\r\n                                        newGamePlayers[firstWithId] = {...newGamePlayers[firstWithId], points}\r\n                                    }\r\n                                    this.setState({...this.state, newGamePlayers})\r\n                                }}\r\n                            />\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col xs={2} xl={2}>\r\n                        <Button\r\n                            disabled={removePlayerDisabled}\r\n                            variant=\"outline-danger\"\r\n                            onClick={(e: React.MouseEvent<HTMLElement>) => {\r\n                                e.currentTarget.blur();\r\n                                const newGamePlayers = [...this.state.newGamePlayers];\r\n                                const firstWithId = newGamePlayers.findIndex((cur: any) => {\r\n                                    return cur && cur.id === player.id\r\n                                });\r\n                                if (firstWithId !== -1) {\r\n                                    newGamePlayers.splice(firstWithId, 1);\r\n                                }\r\n                                this.setState({...this.state, newGamePlayers})\r\n                            }}\r\n                        >\r\n                            Remove\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        });\r\n\r\n        const addGameDisabled = this.state.gameId === null || this.state.newGamePlayers.filter((e: any) => {\r\n            return e.id !== -1\r\n        }).length <= 0;\r\n        return (\r\n            <Row>\r\n                <Col md={8}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Card.Title>Add new game</Card.Title>\r\n                            <Form>\r\n                                <Row style={{marginBottom: 5}}>\r\n                                    <Col>\r\n                                        <AsyncTypeahead\r\n                                            options={this.state.typeAhead.options}\r\n                                            isLoading={this.state.typeAhead.isLoading}\r\n                                            placeholder=\"Search for boardgames...\"\r\n                                            labelKey={\"name\"}\r\n                                            id=\"boardGameAutocomplete\"\r\n                                            onSearch={this._handleSearch}\r\n                                            ref={(typeahead: any) => this.typeahead = typeahead}\r\n                                            onChange={(e) => {\r\n                                                if(e.length){\r\n                                                    const gameId = e[0].id;\r\n                                                    this.setState({...this.state, gameId});\r\n                                                }else{\r\n                                                    this.setState({...this.state, gameId: null});\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row style={{marginBottom: 5}}>\r\n                                    <Col>\r\n                                        <Card>\r\n                                            <Card.Body>\r\n                                                <Row>\r\n                                                    <Col xs={6} lg={6}>\r\n                                                        <label style={{width: \"100%\"}}>Player</label>\r\n                                                    </Col>\r\n                                                    <Col xs={3} xl={4}>\r\n                                                        <label style={{width: \"100%\"}}>Points</label>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                {playerInputs}\r\n                                                <Button\r\n                                                    variant=\"outline-success\"\r\n                                                    disabled={addPlayerDisabled}\r\n                                                    onClick={() => {\r\n                                                        this.setState({\r\n                                                            ...this.state,\r\n                                                            newGamePlayers: [...this.state.newGamePlayers, {id: -1}]\r\n                                                        })\r\n                                                    }}\r\n                                                >\r\n                                                    Add Player\r\n                                                </Button>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row style={{marginTop: 5}}>\r\n                                    <Col>\r\n                                        <Button\r\n                                            style={{float: \"right\", color: \"white\"}}\r\n                                            variant=\"outline-primary\"\r\n                                            disabled={addGameDisabled}\r\n                                            onClick={() => {\r\n                                                const newGame = {\r\n                                                    boardGame: {\r\n                                                        id: this.state.gameId\r\n                                                    },\r\n                                                    gamePlayers: this.state.newGamePlayers.map((val: any) => {\r\n                                                        return {\r\n                                                            points: val.points === undefined ? null : parseInt(val.points),\r\n                                                            player: {\r\n                                                                id: val.id\r\n                                                            }\r\n                                                        }\r\n                                                    })\r\n                                                };\r\n\r\n                                                if(this.typeahead !== null) {\r\n                                                    this.typeahead.getInstance().clear();\r\n                                                }\r\n\r\n                                                fetch(`${apiUrl}/room/${this.context.roomName}/game`, {\r\n                                                    method: \"POST\",\r\n                                                    body: JSON.stringify(newGame)\r\n                                                }).then(res => {\r\n                                                    if (res.status === 201) {\r\n                                                        return res.json()\r\n                                                    } else {\r\n                                                        return {};\r\n                                                    }\r\n                                                }).then(game => {\r\n                                                    this.setState({...this.state, gameId: null, newGamePlayers: [{id: -1}]});\r\n                                                    this.context.addGame(game);\r\n                                                }).catch(e => {\r\n                                                    console.log(e);\r\n                                                })\r\n                                            }}\r\n                                        >\r\n                                            Add game\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nNewGame.contextType = RoomContext;\r\nexport default NewGame;","import React from \"react\";\r\nimport {Card, Col, ListGroup, Row} from \"react-bootstrap\";\r\nimport {GameInterface, PlayerInterface} from \"../Room\";\r\n\r\ninterface GameProps {\r\n    id: number;\r\n    name: string;\r\n    gameTime: string;\r\n    players: {\r\n        points: number,\r\n        player: PlayerInterface\r\n    }[]\r\n}\r\n\r\nclass Game extends React.Component<GameProps, any> {\r\n\r\n    constructor(props: GameProps) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let place = 0;\r\n        const placings = [\r\n            \"radial-gradient(ellipse farthest-corner at right bottom, #FEDB37 0%, #FDB931 8%, #9f7928 30%, #8A6E2F 40%, transparent 80%),\" +\r\n            \"radial-gradient(ellipse farthest-corner at left top, #FFFFFF 0%, #FFFFAC 8%, #D1B464 25%, #5d4a1f 62.5%, #5d4a1f 100%)\",\r\n            \"silver\",\r\n            \"#cd7f32\",\r\n            \"lightblue\"\r\n        ];\r\n        const playerItems = this.props.players.map((player, idx) => {\r\n            const style = {background: placings[place] || placings[4], \"color\": \"black\"};\r\n            if((this.props.players[idx + 1] === undefined || this.props.players[idx + 1].points < player.points) && placings[place + 1] !== undefined){\r\n                place++;\r\n            }\r\n\r\n            return (\r\n                    <ListGroup.Item action={false} key={`game_${this.props.id}_${player.player.id}`} bsPrefix={\"list-group-item d-flex justify-content-between align-items-center\"}>\r\n                        <span>{player.player.name}</span>\r\n                        <span className=\"badge badge-pill\" style={style}>{player.points}</span>\r\n                    </ListGroup.Item>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={8}>\r\n                        <Card style={{ marginTop: 10}}>\r\n                            <Row>\r\n                                <Col xs={6} md={8}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>{this.props.name}</Card.Title>\r\n                                        <Card.Subtitle>{this.props.gameTime}</Card.Subtitle>\r\n                                    </Card.Body>\r\n                                </Col>\r\n                                <Col xs={6} md={4}>\r\n                                    <Card style={{marginRight: 5, marginTop: 5, marginBottom: 5}}>\r\n                                        <ListGroup variant=\"flush\">\r\n                                            {playerItems}\r\n                                        </ListGroup>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\nimport {GameInterface} from \"../Room\";\r\nimport Game from \"./Game\";\r\n\r\ninterface PastGamesProps {\r\n    games: GameInterface[]\r\n}\r\n\r\nclass PastGames extends React.Component<PastGamesProps, any> {\r\n\r\n    constructor(props: PastGamesProps) {\r\n        super(props);\r\n        this.state = {\r\n            page: 1\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const games = this.props.games.map(game => {\r\n           return <Game\r\n               key={`game_${game.id}`}\r\n               id={game.id}\r\n               name={game.boardGame.name}\r\n               players={game.gamePlayers}\r\n               gameTime={game.gameTime}\r\n           />\r\n        });\r\n        return (\r\n            <div style={{ marginTop: 10}}>\r\n                {games}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PastGames;","import React from \"react\";\r\nimport NewGame from \"./NewGame\";\r\nimport PastGames from \"./PastGames\";\r\nimport {GameInterface} from \"../Room\";\r\n\r\ninterface GameAreaProps {\r\n    games: GameInterface[];\r\n}\r\n\r\nclass GameArea extends React.Component<GameAreaProps, any> {\r\n\r\n    constructor(props: GameAreaProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: 5}}>\r\n                <NewGame/>\r\n                <PastGames games={this.props.games}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameArea;","import React from \"react\";\r\nimport {Card, Col, Row} from \"react-bootstrap\";\r\n\r\n\r\ninterface PlayerProps {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n    newPlayer?: boolean;\r\n}\r\n\r\nclass Player extends React.Component<PlayerProps, any> {\r\n\r\n    constructor(props: PlayerProps) {\r\n        super(props);\r\n        this.state = {\r\n            color: props.color\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={8} md={4}>\r\n                    <Card style={{marginTop: 10}}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card.Body>{this.props.name}</Card.Body>\r\n                            </Col>\r\n                        </Row>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Player;","import React from \"react\";\r\nimport {Button, Card, Col, Row} from \"react-bootstrap\";\r\nimport {Form} from \"react-bootstrap\";\r\nimport {apiUrl} from \"../../../config.json\";\r\nimport {RoomContext} from \"../../context\";\r\n\r\n\r\nclass NewPlayer extends React.Component<any, any> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={8} md={4}>\r\n                    <Card style={{marginTop: 10}}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card.Body>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Form.Group controlId=\"formBasicEmail\">\r\n                                                <Form.Label>Add new player</Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    autoComplete=\"off\"\r\n                                                    placeholder=\"Player name\"\r\n                                                    value={this.state.name}\r\n                                                    onChange={(e: any) => {\r\n                                                        this.setState({...this.state, name: e.currentTarget.value})\r\n                                                    }}\r\n                                                />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Button\r\n                                                disabled={this.state.name === \"\"}\r\n                                                variant=\"outline-primary\"\r\n                                                style={{color: \"white\"}}\r\n                                                onClick={() => {\r\n                                                    const newPlayer = {\r\n                                                        name: this.state.name,\r\n                                                        color: null\r\n                                                    };\r\n                                                    fetch(`${apiUrl}/room/${this.context.roomName}/player`, {\r\n                                                        method: \"POST\",\r\n                                                        body: JSON.stringify(newPlayer)\r\n                                                    }).then(res => {\r\n                                                        if (res.status === 201) {\r\n                                                            return res.json()\r\n                                                        } else {\r\n                                                            return {};\r\n                                                        }\r\n                                                    }).then(player => {\r\n                                                        this.setState({...this.state, name: \"\"});\r\n                                                        this.context.addPlayer(player);\r\n                                                    }).catch(e => {\r\n                                                        console.log(e);\r\n                                                    });\r\n                                                }}\r\n                                            >\r\n                                                Add player\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Card.Body>\r\n                            </Col>\r\n                        </Row>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\nNewPlayer.contextType = RoomContext;\r\nexport default NewPlayer;","import React from \"react\";\r\nimport {GameInterface, PlayerInterface} from \"../Room\";\r\nimport Player from \"./Player\";\r\nimport NewPlayer from \"./NewPlayer\";\r\n\r\ninterface PlayerAreaProps {\r\n    players: PlayerInterface[];\r\n}\r\n\r\nclass PlayerArea extends React.Component<PlayerAreaProps, any> {\r\n\r\n    constructor(props: PlayerAreaProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const players = this.props.players.map(player => {\r\n            return <Player key={`player_${player.id}`} id={player.id} name={player.name} color={player.color}/>\r\n        });\r\n        return (\r\n            <div>\r\n                <NewPlayer/>\r\n                {players}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerArea;","import React from \"react\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {Container, Tab, Tabs} from \"react-bootstrap\";\r\nimport GameArea from \"./games/GameArea\";\r\nimport PlayerArea from \"./players/PlayerArea\";\r\nimport {RoomContext} from '../context'\r\n\r\nexport interface PlayerInterface {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface GameInterface {\r\n    id: number;\r\n    gameTime: string;\r\n    gamePlayers: {\r\n        points: number;\r\n        player: PlayerInterface\r\n    }[];\r\n    boardGame: {\r\n        id: number;\r\n        name: string;\r\n    }\r\n}\r\n\r\nexport interface RoomInterface {\r\n    id: number | null;\r\n    createTime: string | null;\r\n    games: GameInterface[],\r\n    players: PlayerInterface[],\r\n    loading: boolean\r\n}\r\n\r\nclass Room extends React.Component<RouteComponentProps<any>, RoomInterface> {\r\n\r\n    constructor(props: RouteComponentProps) {\r\n        super(props);\r\n        this.state = {\r\n            id: null,\r\n            createTime: null,\r\n            games: [],\r\n            players: [],\r\n            loading: true\r\n        };\r\n        fetch(`http://192.168.0.101:8080/room/${this.props.match.params.room}`).then(\r\n            res => res.json()).then((room: RoomInterface) => {\r\n                this.setState({\r\n                    id: room.id,\r\n                    createTime: room.createTime,\r\n                    games: room.games,\r\n                    players: room.players,\r\n                    loading: false\r\n                })\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const context = {\r\n            ...this.state,\r\n            roomName: this.props.match.params.room,\r\n            addGame: (game: GameInterface) => {\r\n                const games = [...this.state.games];\r\n                games.unshift(game);\r\n                this.setState({...this.state, games})\r\n            },\r\n            addPlayer: (player: PlayerInterface) => {\r\n                const players = [...this.state.players];\r\n                players.push(player);\r\n                this.setState({...this.state, players})\r\n            }\r\n        };\r\n        if(this.state.loading){\r\n            return <div>Loading...</div>\r\n        }else {\r\n            return (\r\n                <RoomContext.Provider value={context}>\r\n                    <Container>\r\n                        <Tabs defaultActiveKey=\"games\" id=\"room-tab\">\r\n                            <Tab eventKey=\"games\" title=\"Games\">\r\n                                <GameArea games={this.state.games} />\r\n                            </Tab>\r\n                            <Tab eventKey=\"players\" title=\"Players\">\r\n                                <PlayerArea players={this.state.players} />\r\n                            </Tab>\r\n                            <Tab eventKey=\"stats\" title=\"Stats\">\r\n                                <div>c</div>\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Container>\r\n                </RoomContext.Provider>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Room;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport '../App.css';\nimport LandingPage from \"./landing-page/LandingPage\";\nimport Room from \"./main/Room\";\n\nclass App extends Component {\n  render() {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <div>\n                <Route path=\"/\" exact component={LandingPage} />\n                <Route path=\"/:room\" component={Room} />\n            </div>\n        </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}